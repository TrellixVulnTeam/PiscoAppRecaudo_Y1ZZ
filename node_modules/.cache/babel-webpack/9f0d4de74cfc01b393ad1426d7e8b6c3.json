{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\n\nvar BluetoothSerial =\n/** @class */\nfunction (_super) {\n  __extends(BluetoothSerial, _super);\n\n  function BluetoothSerial() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BluetoothSerial.prototype.connect = function (macAddress_or_uuid) {\n    return cordova(this, \"connect\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"],\n      \"observable\": true,\n      \"clearFunction\": \"disconnect\"\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.connectInsecure = function (macAddress) {\n    return cordova(this, \"connectInsecure\", {\n      \"platforms\": [\"Android\"],\n      \"observable\": true,\n      \"clearFunction\": \"disconnect\"\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.disconnect = function () {\n    return cordova(this, \"disconnect\", {}, arguments);\n  };\n\n  BluetoothSerial.prototype.write = function (data) {\n    return cordova(this, \"write\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.available = function () {\n    return cordova(this, \"available\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.read = function () {\n    return cordova(this, \"read\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.readUntil = function (delimiter) {\n    return cordova(this, \"readUntil\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.subscribe = function (delimiter) {\n    return cordova(this, \"subscribe\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"],\n      \"observable\": true,\n      \"clearFunction\": \"unsubscribe\"\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.subscribeRawData = function () {\n    return cordova(this, \"subscribeRawData\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"],\n      \"observable\": true,\n      \"clearFunction\": \"unsubscribeRawData\"\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.clear = function () {\n    return cordova(this, \"clear\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.list = function () {\n    return cordova(this, \"list\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.isEnabled = function () {\n    return cordova(this, \"isEnabled\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.isConnected = function () {\n    return cordova(this, \"isConnected\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.readRSSI = function () {\n    return cordova(this, \"readRSSI\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.showBluetoothSettings = function () {\n    return cordova(this, \"showBluetoothSettings\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.enable = function () {\n    return cordova(this, \"enable\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.discoverUnpaired = function () {\n    return cordova(this, \"discoverUnpaired\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"]\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.setDeviceDiscoveredListener = function () {\n    return cordova(this, \"setDeviceDiscoveredListener\", {\n      \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"],\n      \"observable\": true,\n      \"clearFunction\": \"clearDeviceDiscoveredListener\"\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.setName = function (newName) {\n    return cordova(this, \"setName\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BluetoothSerial.prototype.setDiscoverable = function (discoverableDuration) {\n    return cordova(this, \"setDiscoverable\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BluetoothSerial.pluginName = \"BluetoothSerial\";\n  BluetoothSerial.repo = \"https://github.com/don/BluetoothSerial\";\n  BluetoothSerial.plugin = \"cordova-plugin-bluetooth-serial\";\n  BluetoothSerial.pluginRef = \"bluetoothSerial\";\n  BluetoothSerial.platforms = [\"Android\", \"iOS\", \"Windows Phone 8\"];\n\n  BluetoothSerial.ɵfac = function BluetoothSerial_Factory(t) {\n    return ɵBluetoothSerial_BaseFactory(t || BluetoothSerial);\n  };\n\n  BluetoothSerial.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: BluetoothSerial,\n    factory: function factory(t) {\n      return BluetoothSerial.ɵfac(t);\n    }\n  });\n  var ɵBluetoothSerial_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BluetoothSerial);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BluetoothSerial, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return BluetoothSerial;\n}(IonicNativePlugin);\n\nexport { BluetoothSerial };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/bluetooth-serial/ngx/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\n/**\n * @name Bluetooth Serial\n * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino (not Android to Android or iOS to iOS).\n * @usage\n * ```typescript\n * import { BluetoothSerial } from '@ionic-native/bluetooth-serial/ngx';\n *\n * constructor(private bluetoothSerial: BluetoothSerial) { }\n *\n *\n * // Write a string\n * this.bluetoothSerial.write('hello world').then(success, failure);\n *\n * // Array of int or bytes\n * this.bluetoothSerial.write([186, 220, 222]).then(success, failure);\n *\n * // Typed Array\n * var data = new Uint8Array(4);\n * data[0] = 0x41;\n * data[1] = 0x42;\n * data[2] = 0x43;\n * data[3] = 0x44;\n * this.bluetoothSerial.write(data).then(success, failure);\n *\n * // Array Buffer\n * this.bluetoothSerial.write(data.buffer).then(success, failure);\n * ```\n */\n@Plugin({\n  pluginName: 'BluetoothSerial',\n  repo: 'https://github.com/don/BluetoothSerial',\n  plugin: 'cordova-plugin-bluetooth-serial',\n  pluginRef: 'bluetoothSerial',\n  platforms: ['Android', 'iOS', 'Windows Phone 8'],\n})\n@Injectable()\nexport class BluetoothSerial extends IonicNativePlugin {\n  /**\n   * Connect to a Bluetooth device\n   * @param {string} macAddress_or_uuid Identifier of the remote device\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'disconnect',\n  })\n  connect(macAddress_or_uuid: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Connect insecurely to a Bluetooth device\n   * @param {string} macAddress Identifier of the remote device\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    observable: true,\n    clearFunction: 'disconnect',\n  })\n  connectInsecure(macAddress: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Disconnect from the connected device\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  disconnect(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Writes data to the serial port\n   * @param {any} data ArrayBuffer of data\n   * @returns {Promise<any>} returns a promise when data has been written\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  write(data: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Gets the number of bytes of data available\n   * @returns {Promise<any>} returns a promise that contains the available bytes\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  available(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Reads data from the buffer\n   * @returns {Promise<any>} returns a promise with data from the buffer\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  read(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Reads data from the buffer until it reaches a delimiter\n   * @param {string} delimiter string that you want to search until\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  readUntil(delimiter: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Subscribe to be notified when data is received\n   * @param {string} delimiter the string you want to watch for\n   * @returns {Observable<any>} returns an observable.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'unsubscribe',\n  })\n  subscribe(delimiter: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Subscribe to be notified when data is received\n   * @returns {Observable<any>} returns an observable\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'unsubscribeRawData',\n  })\n  subscribeRawData(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Clears data in buffer\n   * @returns {Promise<any>} returns a promise when completed\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  clear(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Lists bonded devices\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  list(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Reports if bluetooth is enabled\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  isEnabled(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Reports the connection status\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  isConnected(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Reads the RSSI from the connected peripheral\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  readRSSI(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Show the Bluetooth settings on the device\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  showBluetoothSettings(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Enable Bluetooth on the device\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  enable(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Discover unpaired devices\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n  })\n  discoverUnpaired(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.\n   * @returns {Observable<any>} Returns an observable\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'clearDeviceDiscoveredListener',\n  })\n  setDeviceDiscoveredListener(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Sets the human readable device name that is broadcasted to other devices\n   * @param {string} newName Desired name of device\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  setName(newName: string): void {}\n\n  /**\n   * Makes the device discoverable by other devices\n   * @param {number} discoverableDuration Desired number of seconds device should be discoverable for\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  setDiscoverable(discoverableDuration: number): void {}\n}\n"]},"metadata":{},"sourceType":"module"}