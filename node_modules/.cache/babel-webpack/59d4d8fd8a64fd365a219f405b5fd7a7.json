{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, checkAvailability, cordova, getPromise } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar EmailComposer =\n/** @class */\nfunction (_super) {\n  __extends(EmailComposer, _super);\n\n  function EmailComposer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  EmailComposer.prototype.hasPermission = function () {\n    return cordova(this, \"hasPermission\", {\n      \"successIndex\": 0,\n      \"errorIndex\": 2\n    }, arguments);\n  };\n\n  EmailComposer.prototype.requestPermission = function () {\n    return cordova(this, \"requestPermission\", {\n      \"successIndex\": 0,\n      \"errorIndex\": 2\n    }, arguments);\n  };\n\n  EmailComposer.prototype.hasAccount = function () {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          EmailComposer.getPlugin().hasAccount(function (result) {\n            if (result) {\n              resolve(true);\n            } else {\n              resolve(false);\n            }\n          });\n        });\n      }\n    }();\n  };\n\n  EmailComposer.prototype.hasClient = function (app) {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          if (app) {\n            EmailComposer.getPlugin().hasClient(app, function (result) {\n              if (result) {\n                resolve(true);\n              } else {\n                resolve(false);\n              }\n            });\n          } else {\n            EmailComposer.getPlugin().getClients(function (apps) {\n              resolve(apps && apps.length > 0);\n            });\n          }\n        });\n      }\n    }();\n  };\n\n  EmailComposer.prototype.getClients = function () {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          EmailComposer.getPlugin().getClients(function (apps) {\n            if (Object.prototype.toString.call(apps) === '[object String]') {\n              apps = [apps];\n            }\n\n            resolve(apps);\n          });\n        });\n      }\n    }();\n  };\n\n  EmailComposer.prototype.isAvailable = function (app) {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          Promise.all([_this.hasAccount, _this.hasClient(app)]).then(function (results) {\n            return resolve(results.length === 2 && results[0] && results[1]);\n          });\n        });\n      }\n    }();\n  };\n\n  EmailComposer.prototype.open = function (options, scope) {\n    return cordova(this, \"open\", {\n      \"successIndex\": 1,\n      \"errorIndex\": 3\n    }, arguments);\n  };\n\n  EmailComposer.prototype.addAlias = function (alias, packageName) {\n    return cordova(this, \"addAlias\", {}, arguments);\n  };\n\n  EmailComposer.pluginName = \"EmailComposer\";\n  EmailComposer.plugin = \"cordova-plugin-email-composer\";\n  EmailComposer.pluginRef = \"cordova.plugins.email\";\n  EmailComposer.repo = \"https://github.com/katzer/cordova-plugin-email-composer\";\n  EmailComposer.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\", \"macOS\"];\n\n  EmailComposer.ɵfac = function EmailComposer_Factory(t) {\n    return ɵEmailComposer_BaseFactory(t || EmailComposer);\n  };\n\n  EmailComposer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: EmailComposer,\n    factory: function factory(t) {\n      return EmailComposer.ɵfac(t);\n    }\n  });\n  var ɵEmailComposer_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(EmailComposer);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmailComposer, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return EmailComposer;\n}(IonicNativePlugin);\n\nexport { EmailComposer };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/email-composer/ngx/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaCheck, IonicNativePlugin, Plugin, getPromise } from '@ionic-native/core';\n\nexport interface EmailComposerOptions {\n  /**\n   * App to send the email with\n   */\n  app?: string;\n\n  /**\n   * Email address(es) for To field\n   */\n  to?: string | string[];\n\n  /**\n   * Email address(es) for CC field\n   */\n  cc?: string | string[];\n\n  /**\n   * Email address(es) for BCC field\n   */\n  bcc?: string | string[];\n\n  /**\n   * File paths or base64 data streams\n   */\n  attachments?: string[];\n\n  /**\n   * Subject of the email\n   */\n  subject?: string;\n\n  /**\n   * Email body (for HTML, set isHtml to true)\n   */\n  body?: string;\n\n  /**\n   * Indicates if the body is HTML or plain text\n   */\n  isHtml?: boolean;\n\n  /**\n   *  Content type of the email (Android only)\n   */\n  type?: string;\n}\n\n/**\n * @name Email Composer\n * @premier email-composer\n * @description\n *\n * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).\n *\n *\n * @usage\n * ```typescript\n * import { EmailComposer } from '@ionic-native/email-composer/ngx';\n *\n * constructor(private emailComposer: EmailComposer) { }\n *\n * ...\n *\n *\n * this.emailComposer.getClients().then((apps: []) => {\n *    // Returns an array of configured email clients for the device\n * });\n *\n * this.emailComposer.hasClient().then(app, (isValid: boolean) => {\n *  if (isValid) {\n *    // Now we know we have a valid email client configured\n *    // Not specifying an app will return true if at least one email client is configured\n *  }\n * });\n *\n * this.emailComposer.hasAccount().then((isValid: boolean) => {\n *  if (isValid) {\n *    // Now we know we have a valid email account configured\n *  }\n * });\n *\n * this.emailComposer.isAvailable().then(app, (available: boolean) => {\n *  if(available) {\n *    // Now we know we can send an email, calls hasClient and hasAccount\n *    // Not specifying an app will return true if at least one email client is configured\n *  }\n * });\n *\n * let email = {\n *   to: 'max@mustermann.de',\n *   cc: 'erika@mustermann.de',\n *   bcc: ['john@doe.com', 'jane@doe.com'],\n *   attachments: [\n *     'file://img/logo.png',\n *     'res://icon.png',\n *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n *     'file://README.pdf'\n *   ],\n *   subject: 'Cordova Icons',\n *   body: 'How are you? Nice greetings from Leipzig',\n *   isHtml: true\n * }\n *\n * // Send a text message using default options\n * this.emailComposer.open(email);\n * ```\n *\n * You can also assign aliases to email apps\n * ```ts\n * // add alias\n * this.email.addAlias('gmail', 'com.google.android.gm');\n *\n * // then use alias when sending email\n * this.email.open({\n *   app: 'gmail',\n *   ...\n * });\n * ```\n * @interfaces\n * EmailComposerOptions\n */\n@Plugin({\n  pluginName: 'EmailComposer',\n  plugin: 'cordova-plugin-email-composer',\n  pluginRef: 'cordova.plugins.email',\n  repo: 'https://github.com/katzer/cordova-plugin-email-composer',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows', 'macOS'],\n})\n@Injectable()\nexport class EmailComposer extends IonicNativePlugin {\n  /**\n   * Checks if the app has a permission to access email accounts information\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\n   */\n  @Cordova({\n    successIndex: 0,\n    errorIndex: 2,\n  })\n  hasPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request permission to access email accounts information\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\n   */\n  @Cordova({\n    successIndex: 0,\n    errorIndex: 2,\n  })\n  requestPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Verifies if an email account is configured on the device.\n   *\n   * @returns {Promise<any>} Resolves if available, rejects if not available\n   */\n  @CordovaCheck()\n  hasAccount(): Promise<any> {\n    return getPromise<boolean>(resolve => {\n      EmailComposer.getPlugin().hasAccount((result: boolean) => {\n        if (result) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }\n\n  /**\n   * Verifies if a specific email client is installed on the device.\n   *\n   * @param {string} [app] App id or uri scheme.\n   * @returns {Promise<any>} Resolves if available, rejects if not available\n   */\n\n  @CordovaCheck()\n  hasClient(app?: string): Promise<any> {\n    return getPromise<boolean>(resolve => {\n      if (app) {\n        EmailComposer.getPlugin().hasClient(app, (result: boolean) => {\n          if (result) {\n            resolve(true);\n          } else {\n            resolve(false);\n          }\n        });\n      } else {\n        EmailComposer.getPlugin().getClients((apps: string[]) => {\n          resolve(apps && apps.length > 0);\n        });\n      }\n    });\n  }\n\n  /**\n   * Returns an array of email clients installed on the device.\n   *\n   * @returns {Promise<string[]>} Resolves if available, rejects if not available\n   */\n  @CordovaCheck()\n  @Cordova({ platforms: ['Android'] })\n  getClients(): Promise<string[]> {\n    return getPromise<string[]>(resolve => {\n      EmailComposer.getPlugin().getClients((apps: any) => {\n        if (Object.prototype.toString.call(apps) === '[object String]') {\n          apps = [apps];\n        }\n        resolve(apps);\n      });\n    });\n  }\n\n  /**\n   * Verifies if sending emails is supported on the device.\n   *\n   * @param {string} [app] App id or uri scheme.\n   * @returns {Promise<any>} Resolves if available, rejects if not available\n   */\n  @CordovaCheck()\n  isAvailable(app?: string): Promise<any> {\n    return getPromise<boolean>(resolve => {\n      Promise.all([this.hasAccount, this.hasClient(app)]).then(results => {\n        return resolve(results.length === 2 && results[0] && results[1]);\n      });\n    });\n  }\n\n  /**\n   * Displays the email composer pre-filled with data.\n   *\n   * @param {EmailComposerOptions} options Email\n   * @param {any} [scope] Scope for the promise\n   * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 3,\n  })\n  open(options: EmailComposerOptions, scope?: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Adds a new mail app alias.\n   *\n   * @param {string} alias The alias name\n   * @param {string} packageName The package name\n   */\n  @Cordova()\n  addAlias(alias: string, packageName: string): void {}\n}\n"]},"metadata":{},"sourceType":"module"}