{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar Device =\n/** @class */\nfunction (_super) {\n  __extends(Device, _super);\n\n  function Device() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Device.prototype, \"cordova\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"cordova\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"cordova\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Device.prototype, \"model\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"model\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"model\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Device.prototype, \"platform\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"platform\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"platform\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Device.prototype, \"uuid\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"uuid\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"uuid\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Device.prototype, \"version\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"version\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"version\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Device.prototype, \"manufacturer\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"manufacturer\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"manufacturer\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Device.prototype, \"isVirtual\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"isVirtual\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"isVirtual\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Device.prototype, \"serial\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"serial\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"serial\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Device.pluginName = \"Device\";\n  Device.plugin = \"cordova-plugin-device\";\n  Device.pluginRef = \"device\";\n  Device.repo = \"https://github.com/apache/cordova-plugin-device\";\n  Device.platforms = [\"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\n\n  Device.ɵfac = function Device_Factory(t) {\n    return ɵDevice_BaseFactory(t || Device);\n  };\n\n  Device.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: Device,\n    factory: function factory(t) {\n      return Device.ɵfac(t);\n    }\n  });\n  var ɵDevice_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(Device);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Device, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return Device;\n}(IonicNativePlugin);\n\nexport { Device };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/device/ngx/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaProperty, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\ndeclare const window: any;\n\n/**\n * @name Device\n * @premier device\n * @description\n * Access information about the underlying device and platform.\n *\n * @usage\n * ```typescript\n * import { Device } from '@ionic-native/device/ngx';\n *\n * constructor(private device: Device) { }\n *\n * ...\n *\n * console.log('Device UUID is: ' + this.device.uuid);\n * ```\n */\n@Plugin({\n  pluginName: 'Device',\n  plugin: 'cordova-plugin-device',\n  pluginRef: 'device',\n  repo: 'https://github.com/apache/cordova-plugin-device',\n  platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows'],\n})\n@Injectable()\nexport class Device extends IonicNativePlugin {\n  /** Get the version of Cordova running on the device. */\n  @CordovaProperty()\n  cordova: string;\n\n  /**\n   * The device.model returns the name of the device's model or product. The value is set\n   * by the device manufacturer and may be different across versions of the same product.\n   */\n  @CordovaProperty()\n  model: string;\n\n  /** Get the device's operating system name. */\n  @CordovaProperty()\n  platform: string;\n\n  /** Get the device's Universally Unique Identifier (UUID). */\n  @CordovaProperty()\n  uuid: string;\n\n  /** Get the operating system version. */\n  @CordovaProperty()\n  version: string;\n\n  /** Get the device's manufacturer. */\n  @CordovaProperty()\n  manufacturer: string;\n\n  /** Whether the device is running on a simulator. */\n  @CordovaProperty()\n  isVirtual: boolean;\n\n  /** Get the device hardware serial number. */\n  @CordovaProperty()\n  serial: string;\n}\n"]},"metadata":{},"sourceType":"module"}