{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, checkAvailability, cordovaInstance, instancePropertyGet, instancePropertySet } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar SQLiteObject =\n/** @class */\nfunction () {\n  function SQLiteObject(_objectInstance) {\n    this._objectInstance = _objectInstance;\n  }\n\n  SQLiteObject.prototype.addTransaction = function (transaction) {\n    return cordovaInstance(this, \"addTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  SQLiteObject.prototype.transaction = function (fn) {\n    return cordovaInstance(this, \"transaction\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 1\n    }, arguments);\n  };\n\n  SQLiteObject.prototype.readTransaction = function (fn) {\n    return cordovaInstance(this, \"readTransaction\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.startNextTransaction = function () {\n    return cordovaInstance(this, \"startNextTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  SQLiteObject.prototype.open = function () {\n    return cordovaInstance(this, \"open\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.close = function () {\n    return cordovaInstance(this, \"close\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.executeSql = function (statement, params) {\n    return cordovaInstance(this, \"executeSql\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.sqlBatch = function (sqlStatements) {\n    return cordovaInstance(this, \"sqlBatch\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.abortallPendingTransactions = function () {\n    return cordovaInstance(this, \"abortallPendingTransactions\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  Object.defineProperty(SQLiteObject.prototype, \"databaseFeatures\", {\n    get: function get() {\n      return instancePropertyGet(this, \"databaseFeatures\");\n    },\n    set: function set(value) {\n      instancePropertySet(this, \"databaseFeatures\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SQLiteObject.prototype, \"openDBs\", {\n    get: function get() {\n      return instancePropertyGet(this, \"openDBs\");\n    },\n    set: function set(value) {\n      instancePropertySet(this, \"openDBs\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SQLiteObject;\n}();\n\nexport { SQLiteObject };\n\nvar SQLite =\n/** @class */\nfunction (_super) {\n  __extends(SQLite, _super);\n\n  function SQLite() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SQLite.prototype.create = function (config) {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return new Promise(function (resolve, reject) {\n          sqlitePlugin.openDatabase(config, function (db) {\n            return resolve(new SQLiteObject(db));\n          }, reject);\n        });\n      }\n    }();\n  };\n\n  SQLite.prototype.echoTest = function () {\n    return cordova(this, \"echoTest\", {}, arguments);\n  };\n\n  SQLite.prototype.selfTest = function () {\n    return cordova(this, \"selfTest\", {}, arguments);\n  };\n\n  SQLite.prototype.deleteDatabase = function (config) {\n    return cordova(this, \"deleteDatabase\", {}, arguments);\n  };\n\n  SQLite.pluginName = \"SQLite\";\n  SQLite.pluginRef = \"sqlitePlugin\";\n  SQLite.plugin = \"cordova-sqlite-storage\";\n  SQLite.repo = \"https://github.com/litehelpers/Cordova-sqlite-storage\";\n  SQLite.platforms = [\"Android\", \"iOS\", \"macOS\", \"Windows\"];\n\n  SQLite.ɵfac = function SQLite_Factory(t) {\n    return ɵSQLite_BaseFactory(t || SQLite);\n  };\n\n  SQLite.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: SQLite,\n    factory: function factory(t) {\n      return SQLite.ɵfac(t);\n    }\n  });\n  var ɵSQLite_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(SQLite);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SQLite, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return SQLite;\n}(IonicNativePlugin);\n\nexport { SQLite };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/sqlite/ngx/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Cordova,\n  CordovaCheck,\n  CordovaInstance,\n  InstanceProperty,\n  IonicNativePlugin,\n  Plugin,\n} from '@ionic-native/core';\n\ndeclare const sqlitePlugin: any;\n\nexport interface SQLiteDatabaseConfig {\n  /**\n   * Name of the database. Example: 'my.db'\n   */\n  name: string;\n  /**\n   * Location of the database. Example: 'default'\n   */\n  location?: string;\n  /**\n   * iOS Database Location. Example: 'Library'\n   */\n  iosDatabaseLocation?: string;\n  /**\n   * support opening pre-filled databases with https://github.com/litehelpers/cordova-sqlite-ext\n   */\n  createFromLocation?: number;\n  /**\n   * support encrypted databases with https://github.com/litehelpers/Cordova-sqlcipher-adapter\n   */\n  key?: string;\n}\n\n/**\n * @hidden\n */\nexport interface DbTransaction {\n  executeSql: (sql: any, values?: any[], success?: Function, error?: Function) => void;\n}\n\n/**\n * @hidden\n */\nexport interface SQLiteTransaction extends DbTransaction {\n  start: () => void;\n  addStatement: DbTransaction['executeSql'];\n  handleStatementSuccess: (handler: Function, response: any) => void;\n  handleStatementFailure: (handler: Function, response: any) => void;\n  run: () => void;\n  abort: (txFailure: any) => void;\n  finish: () => void;\n  abortFromQ: (sqlerror: any) => void;\n}\n\n/**\n * @hidden\n */\nexport class SQLiteObject {\n  constructor(public _objectInstance: any) {}\n\n  @InstanceProperty() databaseFeatures: { isSQLitePluginDatabase: boolean };\n  @InstanceProperty() openDBs: any;\n\n  @CordovaInstance({\n    sync: true,\n  })\n  addTransaction(transaction: (tx: SQLiteTransaction) => void): void {}\n\n  /**\n   * @param fn {Function}\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance({\n    successIndex: 2,\n    errorIndex: 1,\n  })\n  transaction(fn: (tx: DbTransaction) => void): Promise<any> {\n    return;\n  }\n\n  /**\n   * @param fn {Function}\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  readTransaction(fn: (tx: SQLiteTransaction) => void): Promise<any> {\n    return;\n  }\n\n  @CordovaInstance({\n    sync: true,\n  })\n  startNextTransaction(): void {}\n\n  /**\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  open(): Promise<any> {\n    return;\n  }\n\n  /**\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  close(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Execute SQL on the opened database. Note, you must call `create` first, and\n   * ensure it resolved and successfully opened the database.\n   */\n  @CordovaInstance()\n  executeSql(statement: string, params?: any[]): Promise<any> {\n    return;\n  }\n\n  /**\n   * @param sqlStatements {string[] | string[][] | any[]}\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  sqlBatch(sqlStatements: (string | string[] | any)[]): Promise<any> {\n    return;\n  }\n\n  @CordovaInstance({\n    sync: true,\n  })\n  abortallPendingTransactions(): void {}\n}\n\n/**\n * @name SQLite\n *\n * @description\n * Access SQLite databases on the device.\n *\n * @usage\n *\n * ```typescript\n * import { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\n *\n * constructor(private sqlite: SQLite) { }\n *\n * ...\n *\n * this.sqlite.create({\n *   name: 'data.db',\n *   location: 'default'\n * })\n *   .then((db: SQLiteObject) => {\n *\n *\n *     db.executeSql('create table danceMoves(name VARCHAR(32))', [])\n *       .then(() => console.log('Executed SQL'))\n *       .catch(e => console.log(e));\n *\n *\n *   })\n *   .catch(e => console.log(e));\n *\n * ```\n *\n * @classes\n * SQLiteObject\n * @interfaces\n * SQLiteDatabaseConfig\n * SQLiteTransaction\n */\n@Plugin({\n  pluginName: 'SQLite',\n  pluginRef: 'sqlitePlugin',\n  plugin: 'cordova-sqlite-storage',\n  repo: 'https://github.com/litehelpers/Cordova-sqlite-storage',\n  platforms: ['Android', 'iOS', 'macOS', 'Windows'],\n})\n@Injectable()\nexport class SQLite extends IonicNativePlugin {\n  /**\n   * Open or create a SQLite database file.\n   *\n   * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\n   *\n   * @param config {SQLiteDatabaseConfig} database configuration\n   * @return Promise<SQLiteObject>\n   */\n  @CordovaCheck()\n  create(config: SQLiteDatabaseConfig): Promise<SQLiteObject> {\n    return new Promise((resolve, reject) => {\n      sqlitePlugin.openDatabase(config, (db: any) => resolve(new SQLiteObject(db)), reject);\n    });\n  }\n\n  /**\n   * Verify that both the Javascript and native part of this plugin are installed in your application\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  echoTest(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Automatically verify basic database access operations including opening a database\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  selfTest(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Deletes a database\n   * @param config {SQLiteDatabaseConfig} database configuration\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  deleteDatabase(config: SQLiteDatabaseConfig): Promise<any> {\n    return;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}