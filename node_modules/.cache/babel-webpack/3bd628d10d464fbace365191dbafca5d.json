{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, checkAvailability, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport { Observable, merge } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nexport var Connection;\n\n(function (Connection) {\n  Connection[\"UNKNOWN\"] = \"unknown\";\n  Connection[\"ETHERNET\"] = \"ethernet\";\n  Connection[\"WIFI\"] = \"wifi\";\n  Connection[\"CELL_2G\"] = \"2g\";\n  Connection[\"CELL_3G\"] = \"3g\";\n  Connection[\"CELL_4G\"] = \"4g\";\n  Connection[\"CELL\"] = \"cellular\";\n  Connection[\"NONE\"] = \"none\";\n})(Connection || (Connection = {}));\n\nvar Network =\n/** @class */\nfunction (_super) {\n  __extends(Network, _super);\n\n  function Network() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Constants for possible connection types\n     */\n\n\n    _this.Connection = {\n      UNKNOWN: 'unknown',\n      ETHERNET: 'ethernet',\n      WIFI: 'wifi',\n      CELL_2G: '2g',\n      CELL_3G: '3g',\n      CELL_4G: '4g',\n      CELL: 'cellular',\n      NONE: 'none'\n    };\n    return _this;\n  }\n\n  Network.prototype.onChange = function () {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return merge(_this.onConnect().pipe(mapTo('connected')), _this.onDisconnect().pipe(mapTo('disconnected')));\n      }\n    }();\n  };\n\n  Network.prototype.onDisconnect = function () {\n    return cordova(this, \"onDisconnect\", {\n      \"eventObservable\": true,\n      \"event\": \"offline\",\n      \"element\": \"document\"\n    }, arguments);\n  };\n\n  Network.prototype.onConnect = function () {\n    return cordova(this, \"onConnect\", {\n      \"eventObservable\": true,\n      \"event\": \"online\",\n      \"element\": \"document\"\n    }, arguments);\n  };\n\n  Object.defineProperty(Network.prototype, \"type\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"type\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"type\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Network.prototype, \"downlinkMax\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"downlinkMax\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"downlinkMax\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Network.pluginName = \"Network\";\n  Network.plugin = \"cordova-plugin-network-information\";\n  Network.pluginRef = \"navigator.connection\";\n  Network.repo = \"https://github.com/apache/cordova-plugin-network-information\";\n  Network.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n\n  Network.ɵfac = function Network_Factory(t) {\n    return ɵNetwork_BaseFactory(t || Network);\n  };\n\n  Network.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: Network,\n    factory: function factory(t) {\n      return Network.ɵfac(t);\n    }\n  });\n  var ɵNetwork_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(Network);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Network, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return Network;\n}(IonicNativePlugin);\n\nexport { Network };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/network/ngx/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaCheck, CordovaProperty, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable, merge } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\ndeclare const navigator: any;\n\nexport enum Connection {\n  UNKNOWN = 'unknown',\n  ETHERNET = 'ethernet',\n  WIFI = 'wifi',\n  CELL_2G = '2g',\n  CELL_3G = '3g',\n  CELL_4G = '4g',\n  CELL = 'cellular',\n  NONE = 'none',\n}\n\n/**\n * @name Network\n * @premier network-information\n * @description\n * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).\n *\n * @usage\n * ```typescript\n * import { Network } from '@ionic-native/network/ngx';\n *\n * constructor(private network: Network) { }\n *\n * ...\n *\n * // watch network for a disconnection\n * let disconnectSubscription = this.network.onDisconnect().subscribe(() => {\n *   console.log('network was disconnected :-(');\n * });\n *\n * // stop disconnect watch\n * disconnectSubscription.unsubscribe();\n *\n *\n * // watch network for a connection\n * let connectSubscription = this.network.onConnect().subscribe(() => {\n *   console.log('network connected!');\n *   // We just got a connection but we need to wait briefly\n *    // before we determine the connection type. Might need to wait.\n *   // prior to doing any api requests as well.\n *   setTimeout(() => {\n *     if (this.network.type === 'wifi') {\n *       console.log('we got a wifi connection, woohoo!');\n *     }\n *   }, 3000);\n * });\n *\n * // stop connect watch\n * connectSubscription.unsubscribe();\n *\n * ```\n * @advanced\n * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`\n */\n@Plugin({\n  pluginName: 'Network',\n  plugin: 'cordova-plugin-network-information',\n  pluginRef: 'navigator.connection',\n  repo: 'https://github.com/apache/cordova-plugin-network-information',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows'],\n})\n@Injectable()\nexport class Network extends IonicNativePlugin {\n  /**\n   * Constants for possible connection types\n   */\n  Connection = {\n    UNKNOWN: 'unknown',\n    ETHERNET: 'ethernet',\n    WIFI: 'wifi',\n    CELL_2G: '2g',\n    CELL_3G: '3g',\n    CELL_4G: '4g',\n    CELL: 'cellular',\n    NONE: 'none',\n  };\n\n  /**\n   * Connection type\n   * @return {string}\n   */\n  @CordovaProperty() type: string;\n\n  /**\n   * Downlink Max Speed\n   * @return {string}\n   */\n  @CordovaProperty() downlinkMax: string;\n\n  /**\n   * Returns an observable to watch connection changes\n   * @return {Observable<'connected' | 'disconnected'>}\n   */\n  @CordovaCheck()\n  onChange(): Observable<'connected' | 'disconnected'> {\n    return merge(\n      this.onConnect().pipe(mapTo('connected')),\n      this.onDisconnect().pipe(mapTo('disconnected')) as Observable<'disconnected'>\n    );\n  }\n\n  /**\n   * Get notified when the device goes offline\n   * @returns {Observable<any>} Returns an observable.\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'offline',\n    element: document,\n  })\n  onDisconnect(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Get notified when the device goes online\n   * @returns {Observable<any>} Returns an observable.\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'online',\n    element: document,\n  })\n  onConnect(): Observable<any> {\n    return;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}