{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\nexport var OutputType;\n\n(function (OutputType) {\n  OutputType[OutputType[\"FILE_URL\"] = 0] = \"FILE_URL\";\n  OutputType[OutputType[\"DATA_URL\"] = 1] = \"DATA_URL\";\n})(OutputType || (OutputType = {}));\n\nvar ImagePicker =\n/** @class */\nfunction (_super) {\n  __extends(ImagePicker, _super);\n\n  function ImagePicker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ImagePicker.prototype.getPictures = function (options) {\n    return cordova(this, \"getPictures\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  ImagePicker.prototype.hasReadPermission = function () {\n    return cordova(this, \"hasReadPermission\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  ImagePicker.prototype.requestReadPermission = function () {\n    return cordova(this, \"requestReadPermission\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  ImagePicker.pluginName = \"ImagePicker\";\n  ImagePicker.plugin = \"cordova-plugin-telerik-imagepicker\";\n  ImagePicker.pluginRef = \"window.imagePicker\";\n  ImagePicker.repo = \"https://github.com/Telerik-Verified-Plugins/ImagePicker\";\n  ImagePicker.install = \"ionic cordova plugin add cordova-plugin-telerik-imagepicker --variable PHOTO_LIBRARY_USAGE_DESCRIPTION=\\\"your usage message\\\"\";\n  ImagePicker.installVariables = [\"PHOTO_LIBRARY_USAGE_DESCRIPTION\"];\n  ImagePicker.platforms = [\"Android\", \"iOS\"];\n\n  ImagePicker.ɵfac = function ImagePicker_Factory(t) {\n    return ɵImagePicker_BaseFactory(t || ImagePicker);\n  };\n\n  ImagePicker.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ImagePicker,\n    factory: function factory(t) {\n      return ImagePicker.ɵfac(t);\n    }\n  });\n  var ɵImagePicker_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(ImagePicker);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImagePicker, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return ImagePicker;\n}(IonicNativePlugin);\n\nexport { ImagePicker };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/image-picker/ngx/index.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;;AAoDA,OAAA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;AACpB,EAAA,UAAA,CAAA,UAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACD,CAHD,EAAY,UAAU,KAAV,UAAU,GAAA,EAAA,CAAtB;;AAIA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAuCiC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAAkB,WAAA,WAAA,GAAA;AAE9B,WAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AAEL;;AAMd,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAW,UAAC,OAAD,EAA4B;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,aAAA,EAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAvC;;AAWA,EAAA,WAAA,CAAA,SAAA,CAAA,iBAAA,GAAiB,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,mBAAA,EAAA;AAAA,mBAAA,CAAA,SAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAjB;;AAWA,EAAA,WAAA,CAAA,SAAA,CAAA,qBAAA,GAAqB,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,uBAAA,EAAA;AAAA,mBAAA,CAAA,SAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAArB;;AAIqE,EAAA,WAAA,CAAA,UAAA,GAAA,aAAA;AAA4C,EAAA,WAAA,CAAA,MAAA,GAAA,oCAAA;AAA+D,EAAA,WAAA,CAAA,SAAA,GAAA,oBAAA;AAAkD,EAAA,WAAA,CAAA,IAAA,GAAA,yDAAA;AAAkF,EAAA,WAAA,CAAA,OAAA,GAAA,+HAAA;AAA2J,EAAA,WAAA,CAAA,gBAAA,GAAA,CAAA,iCAAA,CAAA;AAAwE,EAAA,WAAA,CAAA,SAAA,GAAA,CAAA,SAAA,EAAA,KAAA,CAAA;;8BArCxhB,mB,CAAA,C,EAAA;AAAA,WAAU,wBAAA,CAAA,CAAA,IAAA,WAAA,CAAV;AAAU,G;;;;;;;;;;;;;;AACL,G;;AAAC,SAhGP,WAgGO;AAhGL,CAyDF,CAuCiC,iBAvCjC,CAAA;;AAwCC,SADY,WACZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface ImagePickerOptions {\n  /**\n   * max images to be selected, defaults to 15. If this is set to 1, upon selection of a single image, the plugin will return it. (Android only)\n   */\n  maximumImagesCount?: number;\n\n  /**\n   * Max width to allow images to be\n   */\n  width?: number;\n\n  /**\n   * Max height to allow images to be\n   */\n  height?: number;\n\n  /**\n   * Quality of images, defaults to 100\n   */\n  quality?: number;\n\n  /**\n   * Videos allowed?\n   */\n  allow_video?: boolean;\n\n  /**\n   * the default is the message of the old plugin impl\n   */\n  title?: string;\n\n  /**\n   * the old plugin impl didn't have it, so passing null by default\n   */\n  message?: string;\n\n  /**\n   * Choose the format of the return value.\n   * Defined in ImagePicker.OutputType. Default is FILE_URI.\n   *      FILE_URI : 0,   Return image file URI,\n   *      DATA_URL : 1,   Return image as base64-encoded string\n   */\n  outputType?: number;\n\n  /**\n   * Disable the iOS popover as seen on iPad\n   */\n  disable_popover?: boolean;\n}\n\nexport enum OutputType {\n  FILE_URL = 0,\n  DATA_URL,\n}\n\n/**\n * @name Image Picker\n * @description\n * Cordova Plugin For Multiple Image Selection\n *\n * Requires Cordova plugin: `cordova-plugin-image-picker`.\n * For more info, please see the https://github.com/Telerik-Verified-Plugins/ImagePicker\n *\n * @usage\n * ```typescript\n * import { ImagePicker } from '@ionic-native/image-picker/ngx';\n *\n *\n * constructor(private imagePicker: ImagePicker) { }\n *\n * ...\n *\n * this.imagePicker.getPictures(options).then((results) => {\n *   for (var i = 0; i < results.length; i++) {\n *       console.log('Image URI: ' + results[i]);\n *   }\n * }, (err) => { });\n *\n * ```\n * @interfaces\n * ImagePickerOptions\n */\n@Plugin({\n  pluginName: 'ImagePicker',\n  plugin: 'cordova-plugin-telerik-imagepicker',\n  pluginRef: 'window.imagePicker',\n  repo: 'https://github.com/Telerik-Verified-Plugins/ImagePicker',\n  install:\n    'ionic cordova plugin add cordova-plugin-telerik-imagepicker --variable PHOTO_LIBRARY_USAGE_DESCRIPTION=\"your usage message\"',\n  installVariables: ['PHOTO_LIBRARY_USAGE_DESCRIPTION'],\n  platforms: ['Android', 'iOS'],\n})\n@Injectable()\nexport class ImagePicker extends IonicNativePlugin {\n  /**\n   * Pick pictures from the library.\n   * @param {ImagePickerOptions} options\n   * @returns {Promise<any>} Returns a Promise that resolves the image file URI\n   * otherwise rejects with an error.\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  getPictures(options: ImagePickerOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check if we have permission to read images\n   * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates whether we have permission\n   */\n  @Cordova({\n    platforms: ['Android'],\n  })\n  hasReadPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request permission to read images\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n  })\n  requestReadPermission(): Promise<any> {\n    return;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}