{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, checkAvailability, getPromise } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar Printer =\n/** @class */\nfunction (_super) {\n  __extends(Printer, _super);\n\n  function Printer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Checks whether the device is capable of printing (uses `check()` internally)\n   * @returns {Promise<boolean>}\n   */\n\n\n  Printer.prototype.isAvailable = function () {\n    return this.check().then(function (res) {\n      return Promise.resolve(res.avail);\n    });\n  };\n\n  Printer.prototype.check = function () {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          Printer.getPlugin().canPrintItem(function (avail, count) {\n            resolve({\n              avail: avail,\n              count: count\n            });\n          });\n        });\n      }\n    }();\n  };\n\n  Printer.prototype.pick = function () {\n    return cordova(this, \"pick\", {}, arguments);\n  };\n\n  Printer.prototype.print = function (content, options) {\n    return cordova(this, \"print\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 4\n    }, arguments);\n  };\n\n  Printer.pluginName = \"Printer\";\n  Printer.plugin = \"cordova-plugin-printer\";\n  Printer.pluginRef = \"cordova.plugins.printer\";\n  Printer.repo = \"https://github.com/katzer/cordova-plugin-printer\";\n  Printer.platforms = [\"Android\", \"iOS\", \"Windows\"];\n\n  Printer.ɵfac = function Printer_Factory(t) {\n    return ɵPrinter_BaseFactory(t || Printer);\n  };\n\n  Printer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: Printer,\n    factory: function factory(t) {\n      return Printer.ɵfac(t);\n    }\n  });\n  var ɵPrinter_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(Printer);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Printer, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return Printer;\n}(IonicNativePlugin);\n\nexport { Printer };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/printer/ngx/index.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAO,iBAAP,EAAO,OAAP,EAAO,iBAAP,EAA2D,UAA3D,QAA6E,oBAA7E;;;AACA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAsK6B,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAAkB,WAAA,OAAA,GAAA;AAE9B,WAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACT;AAFN;AACF;AACE;AACE;;;AACF,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAL,GAAa,IAAb,CAAkB,UAAC,GAAD,EAAS;AAAK,aAAA,OAAO,CAAC,OAAR,CAAgB,GAAG,CAAnB,KAAA,CAAA;AAA0B,KAA1D,CAAP;AACD,GAFD;;AASA,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAK,YAAA;AAAiB,QAAA,KAAA,GAAA,IAAA;;AACA,WAAA,YAAA;AACtB,UAAA,iBAAA,CAAA,KAAA,CAAA,KAAA,IAAA,EAFsB;AACpB,eAAO,UAAU,CAAM,UAAC,OAAD,EAAkB;AACvC,UAAA,OAAO,CAAC,SAAR,GAAoB,YAApB,CAAiC,UAAC,KAAD,EAAiB,KAAjB,EAA2B;AAC1D,YAAA,OAAO,CAAC;AAAE,cAAA,KAAK,EAAA,KAAP;AAAS,cAAA,KAAK,EAAA;AAAd,aAAD,CAAP;AACD,WAFD;AAGD,SAJgB,CAAjB;AAKD;AACH,KANwB,EAAA;AAQjB,GATL;;AAaA,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,GAAI,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAAJ;;AAcA,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAK,UAAC,OAAD,EAAiC,OAAjC,EAAuD;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAA;AAAA,sBAAA,CAAA;AAAA,oBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA5D;;AAImD,EAAA,OAAA,CAAA,UAAA,GAAA,SAAA;AAAoC,EAAA,OAAA,CAAA,MAAA,GAAA,wBAAA;AAA+C,EAAA,OAAA,CAAA,SAAA,GAAA,yBAAA;AAAmD,EAAA,OAAA,CAAA,IAAA,GAAA,kDAAA;AAAuE,EAAA,OAAA,CAAA,SAAA,GAAA,CAAA,SAAA,EAAA,KAAA,EAAA,SAAA,CAAA;;6CA9CjQ;AAAA,WAAA,oBAAU,CAAA,CAAA,IAAA,OAAA,CAAV;AAAU,G;;;;;;;;;;;;;;AACL,G;;AAAC,SAxKP,OAwKO;AAxKL,CAEF,CAsK6B,iBAtK7B,CAAA;;AAuKC,SADY,OACZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaCheck, IonicNativePlugin, Plugin, getPromise } from '@ionic-native/core';\n\ninterface FontOptions {\n  name: string; // The name of the font family. Only supported on iOS\n  size: number; // The size of the font. Only supported on iOS, Android\n  italic: boolean; // Set to true to enable these font traits. Only supported on iOS\n  bold: boolean; // Set to true to enable these font traits. Only supported on iOS\n  align: 'left' | 'right' | 'center' | 'justified'; // Possible alignments are left, right, center and justified. Only supported on iOS\n  color: string; // The color of the font in hexa-decimal RGB format - \"FF0000\" means red. Only supported on iOS\n}\n\ninterface HeaderFooterLabelOptions {\n  text: string; // The plain text to display. Use %ld to indicate where to insert the page index. For example \"Page %ld\" would result into \"Page 1\", \"Page 2\", .... Only supported on iOS\n  top: string; // The relative position where to place the label within the footer or header area. Only supported on iOS\n  right: string; // The relative position where to place the label within the footer or header area. Only supported on iOS\n  left: string; // The relative position where to place the label within the footer or header area. Only supported on iOS\n  bottom: string; // The relative position where to place the label within the footer or header area. Only supported on iOS\n  font: FontOptions; // The font attributes for the label. Only supported on iOS\n  showPageIndex: boolean; // Set to true if you want to display the page index. Only supported on iOS\n}\n\nexport interface PrintOptions {\n  /**\n   * The name of the print job and the document\n   */\n  name?: string;\n\n  /**\n   * The number of copies for the print task.\n   * Only supported on iOS, Windows\n   */\n  copies?: number;\n\n  /**\n   * Limits the pages to print even the document contains more.\n   * To skip the last n pages you can assign a negative value on iOS.\n   * Only supported on iOS, Android\n   */\n  pageCount?: number;\n\n  /**\n   * Specifies the duplex mode to use for the print job.\n   * Either double-sided on short site (duplex:'short'),\n   * double-sided on long site (duplex:'long') or single-sided (duplex:'none').\n   */\n  duplex?: boolean;\n\n  /**\n   * The orientation of the printed content, portrait or landscape\n   * Portrait by default.\n   */\n  orientation?: 'landscape' | 'portrait';\n\n  /**\n   * If your application only prints black text, setting this property to true can result in better performance in many cases.\n   * False by default.\n   */\n  monochrome?: boolean;\n\n  /**\n   * If your application only prints black text, setting this property to true can result in better performance in many cases.\n   * False by default.\n   * Only supported on iOS, Windows\n   */\n  photo?: boolean;\n\n  /**\n   * Set to false to disable downscaling the image to fit into the content aread.\n   * Only supported on Android\n   */\n  autoFit?: boolean;\n\n  /**\n   * The network URL to the printer.\n   * Only supported on iOS\n   */\n  printer?: string;\n\n  /**\n   * Defines the maximum size of the content area.\n   * Only supported on iOS\n   */\n  maxHeight?: string;\n\n  /**\n   * Defines the maximum size of the content area.\n   * Only supported on iOS\n   */\n  maxWidth?: string;\n\n  /**\n   * Set to false to avoid margins.\n   * The margins for each printed page. Each printer might have its own minimum margins depends on media type and paper format.\n   */\n  margin?:\n    | boolean\n    | {\n        top?: string;\n        left?: string;\n        right?: string;\n        bottom?: string;\n      };\n\n  ui?: {\n    hideNumberOfCopies?: string; // Set to true to hide the control for the number of copies. Only supported on iOS\n    hidePaperFormat?: string; // Set to true to hide the control for the paper format. Only supported on iOS\n    top?: number; // The position of the printer picker. Only supported on iPad\n    left?: number; // The position of the printer picker. Only supported on iPad\n    height?: number; // The size of the printer picker. Only supported on iPad\n    width?: number; // The size of the printer picker. Only supported on iPad\n  };\n\n  paper?: {\n    width: string; // The dimensions of the paper – iOS will will try to choose a format which fits bests. Only supported on iOS\n    height: string; // The dimensions of the paper – iOS will will try to choose a format which fits bests. Only supported on iOS\n    name: string; // The name of the format like IsoA4 or Roll22Inch. https://docs.microsoft.com/en-us/uwp/api/windows.graphics.printing.printmediasize. Only supported on Windows\n    length: string; // On roll-fed printers you can decide when the printer cuts the paper. https://docs.microsoft.com/en-us/uwp/api/windows.graphics.printing.printmediasize. Only supported on iOs\n  };\n\n  font?: FontOptions;\n\n  header?: {\n    height: string; // The height of the header or footer on each page. Only supported on iOS\n    labels: string[]; // An array of labels to display. Only use if there are more then one. Only supported on iOS\n    label: HeaderFooterLabelOptions;\n  };\n\n  footer?: {\n    height: string; // The height of the header or footer on each page. Only supported on iOS\n    labels: string[]; // An array of labels to display. Only use if there are more then one. Only supported on iOS\n    label: HeaderFooterLabelOptions;\n  };\n}\n\n/**\n * @name Printer\n * @description Prints documents or HTML rendered content\n * @usage\n * ```typescript\n * import { Printer, PrintOptions } from '@ionic-native/printer/ngx';\n *\n * constructor(private printer: Printer) { }\n *\n * ...\n *\n * this.printer.isAvailable().then(onSuccess, onError);\n *\n * let options: PrintOptions = {\n *      name: 'MyDocument',\n *      duplex: true,\n *      orientation: 'landscape',\n *      monochrome: true\n * }\n *\n * this.printer.print(content, options).then(onSuccess, onError);\n * ```\n * @interfaces\n * PrintOptions\n */\n@Plugin({\n  pluginName: 'Printer',\n  plugin: 'cordova-plugin-printer',\n  pluginRef: 'cordova.plugins.printer',\n  repo: 'https://github.com/katzer/cordova-plugin-printer',\n  platforms: ['Android', 'iOS', 'Windows'],\n})\n@Injectable()\nexport class Printer extends IonicNativePlugin {\n  /**\n   * Checks whether the device is capable of printing (uses `check()` internally)\n   * @returns {Promise<boolean>}\n   */\n  isAvailable(): Promise<boolean> {\n    return this.check().then((res: any) => Promise.resolve(res.avail));\n  }\n\n  /**\n   * Checks To check if printing is supported in general\n   * @return {Promise<any>} returns a promise that resolve with an object indicating whether printing is available\n   */\n  @CordovaCheck()\n  check(): Promise<any> {\n    return getPromise<any>((resolve: Function) => {\n      Printer.getPlugin().canPrintItem((avail: boolean, count: any) => {\n        resolve({ avail, count });\n      });\n    });\n  }\n\n  /**\n   * Displays a system interface allowing the user to select an available printer. To speak with a printer directly you need to know the network address by picking them before via `printer.pick`.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  pick(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sends content to the printer.\n   * @param content {string | HTMLElement} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.\n   * @param options {PrintOptions} optional. The options to pass to the printer\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 4,\n  })\n  print(content?: string | HTMLElement, options?: PrintOptions): Promise<any> {\n    return;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}